site: https://jsoup.org/

jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, 
using the best of DOM, CSS, and jquery-like methods.jsoup is a Java library for working with real-world HTML. It provides a very 
convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods.

Getting started: Download

Acessar: Maven
If you use Maven to manage the dependencies in your Java project, you do not need to download; just place the following into your 
POM's <dependencies> section:

<dependency>
  <!-- jsoup HTML parser library @ https://jsoup.org/ -->
  <groupId>org.jsoup</groupId>
  <artifactId>jsoup</artifactId>
  <version>1.12.1</version>
</dependency>


//=================================================================================================================================

Seção 02 - Resumo

MetaTags OpenGraph e TwitterCard
Durante este curso vamos desenvolver um aplicação para cadastro de promoções. A ideia é o usuário copiar a URL da página de um 
produto qualquer e depois cole em uma campo do formulário de cadastro de nossa aplicação. Assim, alguns dados desse produto como 
o título ou a imagem do produto sejam automaticamente preenchidos nos campos do formulário.

Para que isso aconteça, vamos capturar essas informações a partir de meta tags que estarão incluídas nessas páginas. Essas meta 
tags devem seguir dois padrões que são o TwitterCard e o OpenGraph.

O TwitterCard é um padrão de meta tags criado pela equipe do Twitter para que o sistema consiga mais facilmente recuperar os dados 
de páginas que são postadas no twitter diariamente. Um exemplo pratico dessa meta tags pode ser visualizado a seguir:

<meta name="twitter:title" content="Curso Java"/>
<meta name="twitter:site" content="@udemy"/>
Repare que essas duas meta tags possuem um atributo name e como valor esse atributo tem o identificador da meta tag referente ao 
TwitterCard. O primeiro identificador tem como objetivo armazenar o título da página, de uma postagem em um blog ou mesmo de um 
produto que está sendo divulgado. E no atributo content é onde o texto contendo o titulo será armazenado.

Já a segunda meta tag vai ter armazenado o nome do site que a página pertence. Existem diversos tipos de meta tags para o TwitterCard, 
as quais se pode encontrar mais detalhes na documentação oficial.

Já o OpenGraph é um recurso usado pelo Facebook com o mesmo intuito, ou seja, ter acesso as informações de sites de terceiros. 
Entretanto, o OpenGraph tem um sistema diferente de meta tags, como pode ver a seguir:

<meta property="og:title" content="Curso Java"/>
<meta property="og:site_name" content="udemy.com"/>
Observe que diferente do TwitterCard o atributo identificador é property e não name. Assim como, temos também uma diferença no valor 
do atributo que será og: seguido do tipo de instrução que a meta tag vai armazenar. Para saber mais, acesse a documentação do 
OpenGraph.


JSoup HTML Parser
Para que possamos capturar as informações desejadas das meta tags vamos trabalhar com a biblioteca JSoup. Esta biblioteca é uma 
excelente ferramenta para a captura de dados em páginas HTML. A documentação é bastante completa e existe uma larga quantidade 
de métodos disponíveis para este fim. No exemplo a seguir, extraído da página oficial, podemos verificar como funciona este processo:

Document doc = Jsoup.connect("http://en.wikipedia.org/").get();
Elements newsHeadlines = doc.select("#mp-itn b a");
for (Element headline : newsHeadlines) {  
    log("%s\n\t%s", 
        headline.attr("title"), headline.absUrl("href"));
}
O código postado acessa uma página via URL adicionada como parâmetro ao método JSoup.connect(). Usando o método get(), o código 
HTML da página é retornado e armazenado na variável do tipo Document.

Tendo o código armazenado é possível, através de instruções, localizar partes especificas do código. No exemplo postado, o método 
select() vai localizar no código o componente HTML que tem o atributo id setado com o valor #mp-itn b a.

Ao encontrar o componente, todo seu conteúdo é extraído e armazenado na variável do tipo Elements, que funciona como uma lista 
de elementos do HTML. Fazendo um foreach nesta lista é possível capturar os valores de atributos desejados, usando métodos do 
JSoup como o attr() ou absUrl().

Vamos então, incluir a dependência do JSoup no arquivo pom.xml do projeto e assim ter acesso a seus recursos:

    <dependency>  
        <groupId>org.jsoup</groupId>
        <artifactId>jsoup</artifactId> 
        <version>1.11.3</version>
    </dependency>



//===========================================================================================================================

Seção 03 - Resumo

Para informações adicionais sobre a jQuery: 
http://api.jquery.com/jquery.ajax/ e também o W3Schools que possui uma boa documentação e exemplos sobre a jQuery.

//===========================================================================================================================

O projeto acessa os dados do site: https://datatables.net/

Inclcuído em lauoyt.html os seguintes arquivos CSS e JS:
		CSS: //cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css
			<link rel="stylesheet" href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css"/>
			
		JS:  //cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js
			<script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
			
No nosso projeto, vamos trabalhar com os dados do link: https://datatables.net/manual/server-side

Para o estilo responsivo funcionar, acessar em https://datatables.net/extensions/responsive/
os arquivos CSS e JS a partir do link 'individual files' e acessar o item 'Responsive' e baixar os arquivos.
Incluído em layout.html:
	
	<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.3/css/responsive.dataTables.min.css"/>
	
	<script src="https://cdn.datatables.net/responsive/2.2.3/js/dataTables.responsive.min.js"></script>


//==========================================================================================================================

Trabalhando com as datas:

Via https://cdnjs.com/, pesquisar por moment e acessar link moment.js: https://cdnjs.com/libraries/moment.js

Importar:	https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment-with-locales.min.js
	
//==========================================================================================================================

Configurando o DWR - Direct Web Remoting: http://www.directwebremoting.org

Clicar em 'Download it now'. Ver texto d link da página abaixo:                              

DWR version 3.0.2 is the latest stable release. Download it now and use DWR in your website in minutes.

Maven
Our latest release is in Maven Central:

  <dependency>
    <groupId>org.directwebremoting</groupId>
    <artifactId>dwr</artifactId>
    <version>3.0.2-RELEASE</version>
  </dependency>

Incluir a dependência acima em pom.xml.
  
criar arquivo em src/main/resource via 'Spring Bean Configuration File' com nome 'dwr-spring'

Acessar o link 'Documentation', 'Server Side', 'Integration with...   Spring';

The namespace
The first task you need to accomplish is adding the following lines (in bold, below) to any of your Spring XML 
files that includes at least one DWR specific tag. Add them inside the beans declaration (at the beginning of the file):

<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"			<==
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.directwebremoting.org/schema/spring-dwr						<==
    http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd"> 			<==
    
Configurar a classe SpringAjaxApplication.java: Incluir o método:

@Bean
public ServletRegistrationBean<DwrSpringServlet> dwrSpringServlet()

